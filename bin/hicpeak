#!/usr/bin/env bash
# predict interaction peaks anchored at one bait
# hicpeak -t MY_73.bam -i MY_71.bam -r chr1:72250000-72270000 -n Mreg -l 2000 -b 500 -w 6000000 -s 1
set -e

trap ctrl_c INT
function ctrl_c() {
        echo -e "\n$(date) hicmap is terminated by the user. Bye!" 2>&1 | tee -a $PREFIX.log
		rm -r $PREFIX*
}


# PART I check weather softwares installed
command -v samtools >/dev/null 2>&1 || { echo >&2 "hicpeak requires samtools but it's not installed.  Aborting."; exit 1; }
command -v hicpeak_filter_bait_reads >/dev/null 2>&1 || { echo >&2 "hicpeak requires hicpeak_filter_bait_reads but it's not installed.  Aborting."; exit 1; }
command -v hicpeak_peak_call >/dev/null 2>&1 || { echo >&2 "hicpeak requires hicpeak_peak_call but it's not installed.  Aborting."; exit 1; }

# PART II usage info
usage(){
cat << EOF

Program: hicTo4c (generate a virtual 4C from HiC data)
Version: v07.09.2016
Contact: Rongxin Fang <r3fang@ucsd.edu>
Lab: http://bioinformatics-renlab.ucsd.edu/rentrac/

usage: hicTo4c [-h] [-t TREAT.bam] [-i INPUT.bam] [-r ANCHOR_REGION] [-n PREFIX] [-l EXTEND_LEN] [-w WINDOW] [-b BIN_SIZE] [-s SMOOTH_FACTOR] [-c CUTOFF] 

Example:
hicTo4c -t treat.bam -i input.bam -r chr3:34548000-34553000 -n Sox2

Options:

  -- required:
	-t  TREAT            treatment HiC generated by hicmap [.bam].
	-i  INPUT            input HiC generated by hicmap [.bam].
	-r  BAIT_REGION      bait for virtual 4C.
	-n  PREFIX           prefix of output files.
  -- optional:
	-l  EXTEND_LEN       extend reads to this fragment size [2000].
	-b  BIN_SIZE         size of the bins, in bases [500].
    -c  CUTOFF           cutoff for peak calling [0.6].
	-w  WINDOW           only predict peaks within the large window 
                         flanking bait point[6,000,000].
	-s  SMOOTH_FACTOR    smooth length defines a window, larger than the
                         binSize, to average the number of reads [1].
EOF
}

# PART III default params
EXTEND_LEN=2000
BIN_SIZE=500
SMOOTH_FACTOR=1
WINDOW=6000000
CUTOFF=1.5
# PART IV receiving arguments
while getopts "t:i:r:n:l:w:b:s:c:" opt;
do
	case "$opt" in
		t) TREAT=$OPTARG;;
		i) INPUT=$OPTARG;;
		r) BAIT_REGION=$OPTARG;;
		n) PREFIX=$OPTARG;;
		l) EXTEND_LEN=$OPTARG;;
		w) WINDOW=$OPTARG;;
		b) BIN_SIZE=$OPTARG;;
		s) SMOOTH_FACTOR=$OPTARG;;
		c) CUTOFF=$OPTARG;;
		\?) usage
			echo "error: unrecognized option -$OPTARG";
			exit 1
			;;
	esac
done


if [ $# -lt 8 ] ; then
   usage
   echo "error: too few arguments"
   exit 1
fi

# check if varaibles exist
[ -z ${TREAT+x} ] && { echo "error: missing variable -t TREAT argument"; exit 1; }
[ -z ${INPUT+x} ] && { echo "error: missing variable -i INPUT argument"; exit 1; }
[ -z ${BAIT_REGION+x} ] && { usage; echo "error: missing -r BAIT_REGION argument."; exit 1; }
[ -z ${PREFIX+x} ] && { usage; echo "error: missing -n PREFIX argument."; exit 1; }
[ -z ${WINDOW+x} ] && { usage; echo "error: missing -w WINDOW argument."; exit 1; }
[ -z ${EXTEND_LEN+x} ] && { usage; echo "error: missing -l EXTEND_LEN argument."; exit 1; }
[ -z ${BIN_SIZE+x} ] && { usage; echo "error: missing -b BIN_SIZE argument."; exit 1; }
[ -z ${SMOOTH_FACTOR+x} ] && { usage; echo "error: missing -s SMOOTH_FACTOR argument."; exit 1; }
[ -z ${CUTOFF+x} ] && { usage; echo "error: missing -c CUTOFF argument."; exit 1; }

# check if files exist
[ ! -f $TREAT ] && { usage; echo "error: -f '$TREAT' not exists."; exit 1; }
[ ! -f $INPUT ] && { usage; echo "error: -r '$INPUT' not exists."; exit 1; }

# check if files indexed
[ ! -f $TREAT.bai ] && { samtools index $TREAT; }
[ ! -f $INPUT.bai ] && { samtools index $INPUT; }

# check format of input
re='^[0-9]+$'
! [[ $EXTEND_LEN =~ $re ]] && { usage; echo -e "error: '$EXTEND_LEN' Not a number"; exit 1; }
! [[ $BIN_SIZE =~ $re ]] && { usage; echo -e "error: '$BIN_SIZE' Not a number"; exit 1; }
! [[ $SMOOTH_FACTOR =~ $re ]] && { usage; echo -e "error: '$SMOOTH_FACTOR' Not a number"; exit 1; }
! [[ $WINDOW =~ $re ]] && { usage; echo -e "error: '$WINDOW' Not a number"; exit 1; }
re='^[0-9]+\.?[0-9]*$'
! [[ $CUTOFF =~ $re ]] && { usage; echo -e "error: '$CUTOFF' Not a float number"; exit 1; }

IFS=':' read -a chr <<< "$BAIT_REGION"
IFS='-' read -a pos <<< "${chr[1]}"

REGION_CHR=${chr[0]}
REGION_START=${pos[0]}
REGION_END=${pos[1]}
REGION_WIDTH=$((REGION_END-REGION_START))
WINDOW_START=$((REGION_START - WINDOW/2))
WINDOW_END=$((REGION_END + WINDOW/2))
[ $WINDOW_START -lt 0 ] && { $WINDOW_START=1; }


! [[ $REGION_START =~ ^-?[0-9]+$ ]] && { usage; echo -e "error: '$REGION_START' Not a number"; exit 1; }
! [[ $REGION_END =~ ^-?[0-9]+$ ]] && { usage; echo -e "error: '$REGION_END' Not a number"; exit 1; }
[ $REGION_START -gt $REGION_END ] && { usage; echo -e "error: -r '$BAIT_REGION' start greater than the end"; exit 1; }

echo $0 $* 2>&1 | tee $PREFIX.log 
echo 2>&1 | tee -a $PREFIX.log
echo TREAT=$TREAT 2>&1 | tee -a $PREFIX.log
echo INPUT=$INPUT 2>&1 | tee -a $PREFIX.log
echo BAIT_REGION=$BAIT_REGION 2>&1 | tee -a $PREFIX.log
echo PREFIX=$PREFIX 2>&1 | tee -a $PREFIX.log
echo EXTEND_LEN=$EXTEND_LEN 2>&1 | tee -a $PREFIX.log
echo BIN_SIZE=$BIN_SIZE 2>&1 | tee -a $PREFIX.log
echo SMOOTH_FACTOR=$SMOOTH_FACTOR 2>&1 | tee -a $PREFIX.log

echo 2>&1 | tee -a $PREFIX.log

#echo -e "$REGION_CHR\t$REGION_START\t$REGION_END" > $PREFIX.bed
samtools view -h $TREAT $REGION_CHR:$REGION_START-$REGION_END | hicpeak_filter_bait_reads $REGION_WIDTH | samtools view -bS - | samtools sort - $PREFIX.treat
samtools index $PREFIX.treat.bam
samtools view -h $INPUT $REGION_CHR:$REGION_START-$REGION_END | hicpeak_filter_bait_reads $REGION_WIDTH | samtools view -bS - | samtools sort - $PREFIX.input
samtools index $PREFIX.input.bam
hicpeak_peak_call treat_file=\'$PREFIX.treat.bam\' input_file=\'$PREFIX.input.bam\' window_size=$WINDOW \
	CHROM=\'$REGION_CHR\' START=$REGION_START END=$REGION_END step_size=$BIN_SIZE \
	extend_len=$EXTEND_LEN bin_size=$BIN_SIZE smooth_factor=$SMOOTH_FACTOR prefix=\'$PREFIX\' \
	cutoff=$CUTOFF

rm $PREFIX.treat.bam
rm $PREFIX.input.bam
rm $PREFIX.treat.bam.bai
rm $PREFIX.input.bam.bai

echo -e "Succeed!" 2>&1 | tee -a $PREFIX.log
rm $PREFIX.log