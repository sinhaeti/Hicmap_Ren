#!/bin/python
# extract all interactions from one loci
import sys
import optparse
import os.path
import collections
import operator 
import numpy as np

def main():
    
    # get arguments from user
    parser = optparse.OptionParser(description='Extract interactions from one anchor.', 
                                   usage='%prog [-h] [-i INPUT] [-s BSIZE] [-g GSIZE] [-c CHR] [-l LEFT] [-r RIGHT]')

    parser.add_option('-i',
                      dest="INPUT",
                      help='Pair-end sam file sorted by cooridantes (stdin supported).'
                      )
   
    parser.add_option('-s',
                      dest="BSIZE", 
                      type=int,
                      help='Bin size.'
                      )

    parser.add_option('-g',
                      dest="GSIZE", 
                      help='Genome size e.g. hg19.fa.fai.'
                      )

    parser.add_option('-c',
                      dest="CHROM", 
                      help='Chromsome name.'
                      )

    parser.add_option('-l',
                      dest="LEFT", 
                      type=int,
                      help='Start of quary regions.'
                      )

    parser.add_option('-r',
                      dest="RIGHT", 
                      type=int,
                      help='End of quary regions.'
                      )
                                            
    parser.add_option('--version',
                      dest="version",
                      default=1.0,
                      type="float",
                      )
                      
    options, remainder = parser.parse_args()
    left = options.LEFT
    right = options.RIGHT
    
    bin_size = 40000
    if options.BSIZE:
        bin_size = options.BSIZE

    if not options.CHROM:
        parser.print_help()
        exit('error: too few arguments, missing CHROM')    
    chrom = options.CHROM

    if not options.GSIZE:
        parser.print_help()
        exit('error: too few arguments, missing GSIZE')

    genome_size = collections.defaultdict(int)
    with open(options.GSIZE) as fin:
        for line in fin:
            genome_size[line.split()[0]] = int(line.split()[1])

    infile = options.INPUT    
    if not infile:
        parser.print_help()
        exit('error: too few arguments, missing INPUT')
    
	if infile != "-" and not os.path.isfile(infile): exit("error: \'%s\' not exist" % infile);
    if infile != "-" and os.path.isfile(infile): fin = open(infile, "r") 	
    if infile == "-": fin = sys.stdin
    max_bin_num = (genome_size[chrom]/bin_size + 1)
    mat = np.zeros((max_bin_num, max_bin_num), dtype=np.int)    

    # counting the interaction between 2 bins
    for line in fin:
        if line.startswith("@"):
            next
        [_chr1, _pos1, _chr2, _pos2, _gap] = [line.split()[2], int(line.split()[3]), line.split()[6], int(line.split()[7]), int(line.split()[8])]
        if _chr1 == chrom and _chr2 == "=":
            mat[_pos1/bin_size][_pos2/bin_size] += 1
    mat = mat/2
    arr = np.sum(mat[left/bin_size: ((right/bin_size) + 1)], axis=0)
    arr[left/bin_size: ((right/bin_size) + 1)] = 0
    for i in xrange(arr.shape[0]-1):
        print "\t".join([chrom, str(i*bin_size), str((i+1)*bin_size), str(arr[i])])
    
if __name__ == '__main__':
    main()