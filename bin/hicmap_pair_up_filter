#!/usr/bin/env python
import optparse
import re
import sys
import os.path

class sam_alignment:
    """A class for sam alignment """
    def __init__(self, str):
        if len(str):
            elems = str.split()
            self.name = elems[0]
            self.flag = int(elems[1])
            self.chrom1 = elems[2]
            self.pos1 = int(elems[3])
            self.score = int(elems[4])
            self.cigar = elems[5]
            self.chrom2 = elems[6]            
            self.pos2 = int(elems[7])
            self.insert_size = int(elems[8])
            self.seq = elems[9]
            self.qual = elems[10]
            self.unknown1 = elems[11]
        else:
            exit('error: sam_alignment input is empty;')
    
    def aln_str(self):
        return '\t'.join([self.name,  str(self.flag), self.chrom1,
               str(self.pos1), str(self.score), str(self.cigar),
               self.chrom2, str(self.pos2), str(self.insert_size), 
               self.seq, self.qual, self.unknown1])
    
def main():
    """ main function """
    TOTAL_NUM_READS = 0
    PAIR_NUM_READS = 0
    TRANS_NUM_READS = 0
    CIS_NUM_READS = 0
    CIS_LONG_NUM_READS = 0
    
    parser = optparse.OptionParser(description='pair up HiC two mates and only keep unuquely mapped cis pairs.', 
                                usage='%prog [-h] [-f SAM1] [-r SAM2] [-d MIN_INSERT_SIZE]')
    
    parser.add_option('-f',
                      dest="SAM1",
                      help='R1 alignments in .sam format.'
                      )
    parser.add_option('-r',
                      dest="SAM2",
                      help='R2 alignments in .sam format.'
                      )
    parser.add_option('-d',
                      dest="MIN_INSERT_SIZE",
                      type=int,
                      help='min intersert distance for long-range reads.'
                      )
    
    DIST_CUTOFF = 10000
    options, remainder = parser.parse_args()
    if options.SAM1:
        fin_r1_name = options.SAM1
    else:
        parser.print_help()
        exit('error: missing -f arguments;')

    if options.SAM2:
        fin_r2_name = options.SAM2
    else:
        parser.print_help()
        exit('error: missing -r arguments;')

    if options.MIN_INSERT_SIZE: DIST_CUTOFF = options.MIN_INSERT_SIZE
    if not os.path.isfile(fin_r1_name): exit('error: file %s not exist;' % fin_r1_name)
    if not os.path.isfile(fin_r2_name): exit('error: file %s not exist;' % fin_r2_name)
    
    
    fin1 = open(fin_r1_name, 'r')
    fin2 = open(fin_r2_name, 'r')
    pattern1=re.compile("@SQ\s+SN:chr[0-9a-zA-Z_]*\s+")
    pattern2=re.compile("@PG\s+ID:bwa\s+")
    while True:
        line1 = fin1.readline()
        line2 = fin2.readline()
        if line1 == "": break
        # head of bam file
        if (re.search(pattern1, line1) != None) or (re.search(pattern2, line1) != None):
            try:
                print line1,
            except IOError:
                try:
                    sys.stdout.close()
                except IOError:
                    pass
                try:
                    sys.stderr.close()
                except IOError:
                    pass
            continue
        else:
            TOTAL_NUM_READS += 1
            aln1 = sam_alignment(line1)
            aln2 = sam_alignment(line2)
            if aln1.name != aln2.name: exit('error: hicmap_pair_up R1 and R2 read names not match;')
            if(aln1.score >= 10 & aln2.score >= 10):
                PAIR_NUM_READS += 1
                if aln1.chrom1 !=  aln2.chrom1: 
                    TRANS_NUM_READS += 1
                if aln1.chrom1 ==  aln2.chrom1:
                    CIS_NUM_READS += 1
                    if aln1.flag == aln2.flag:
                        aln1.flag = 99
                        aln2.flag = 147
                        aln1.chrom2 = "="
                        aln2.chrom2 = "="
                        aln1.pos2 = aln2.pos1
                        aln2.pos2 = aln1.pos1
                        aln1.insert_size =  aln2.pos1 - aln1.pos1
                        aln2.insert_size =  aln1.pos1 - aln2.pos1
                    else:
                        aln1.flag = 83
                        aln2.flag = 163
                        aln1.chrom2 = "="
                        aln2.chrom2 = "="
                        aln1.pos2 = aln2.pos1
                        aln2.pos2 = aln1.pos1
                        aln1.insert_size =  aln2.pos1 - aln1.pos1
                        aln2.insert_size =  aln1.pos1 - aln2.pos1
                    if aln1.insert_size >= DIST_CUTOFF: CIS_LONG_NUM_READS += 1
                    try:
                        print aln1.aln_str()
                        print aln2.aln_str()
                    except IOError:
                        try:
                            sys.stdout.close()
                        except IOError:
                            pass
                        try:
                            sys.stderr.close()
                        except IOError:
                            pass
                    continue                           
    fin1.close()
    fin2.close()
    print  >>sys.stderr, "number of total sequenced pairs: ", TOTAL_NUM_READS
    print  >>sys.stderr, "number of uniquely mapped pairs: ", PAIR_NUM_READS
    print  >>sys.stderr, "number of trans reads: ", TRANS_NUM_READS
    print  >>sys.stderr, "number of cis reads: ", CIS_NUM_READS
    print  >>sys.stderr, "number of long-range cis reads: ", CIS_LONG_NUM_READS
    
if __name__ == '__main__':
    main()