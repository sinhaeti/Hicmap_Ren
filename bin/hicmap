#!/usr/bin/env bash

set -e

trap ctrl_c INT
function ctrl_c() {
        echo -e "\n$(date) hicmap is terminated by the user. Bye!" 2>&1 | tee -a $PREFIX.log
}

# PART I check weather softwares installed
command -v bwa >/dev/null 2>&1 || { echo >&2 "hicmap requires bwa but it's not installed.  Aborting."; exit 1; }
command -v samtools >/dev/null 2>&1 || { echo >&2 "hicmap requires samtools but it's not installed.  Aborting."; exit 1; }

# PART II usage info
usage(){
cat << EOF

Program: hicmap (Hi-C analysis pipeline)
Version: v06.29.2016
Contact: Rongxin Fang <r3fang@ucsd.edu>
Lab: http://bioinformatics-renlab.ucsd.edu/rentrac/

usage: hicmap [-h] [-t THREADS] [-m MAX_MEM] [-f FASTQ1] [-r FASTQ2] [-p MarkDuplicates.jar] [-n PREFIX] [-g BWA_GENOME] [-c CUT_SITES] [-i INSERT_SIZE]

Example:
hicmap -f data/demo_R1.fastq.bz2 -r data/demo_R2.fastq.bz2 -p Picard/MarkDuplicates.jar -n demo -g mm9.fa -c mm9.MboI.bed

Options:    

  -- required:
	-f  FASTQ1           first mate of pair-end sequencing data  [.fq|.gz|.bz2].
	-r  FASTQ2           second mate of pair-end sequencing data [.fq|.gz|.bz2].
	-p  MARK_DUPLICATE   path to picard MarkDuplicates.jar [Picard/MarkDuplicates.jar].
	-n  NAME             prefix of output files.
	-g  BWA_GENOME       BWA indexed reference genome.
	-c  CUT_ENZ          restriction cutter sites files. 
  -- optional:
	-i  INSERT_SIZE      pairs with distance smaller that MIN_INSERT_SIZE will be filtered [10,000].
	-t  INT              threads to be used for BWA mapping [2].
	-m  MAX_MEM          max memory will be used for samtools sort and  MarkDuplicates.jar  [2G].

EOF
}

# PART III default params
THREADS=2
MIN_INSERT_SIZE=10000
MAX_MEM="2G"

# PART IV receiving arguments
while getopts "t:m:f:r:p:n:g:c:i:s" opt;
do
	case "$opt" in
		t) THREADS=$OPTARG;;
		m) MAX_MEM=$OPTARG;;
		f) FASTQ1=$OPTARG;;
		r) FASTQ2=$OPTARG;;
		p) MARK_DUPLICATE=$OPTARG;;
		n) PREFIX=$OPTARG;;
		g) GENOME=$OPTARG;;
		c) CUT_ENZ=$OPTARG;;
		i) MIN_INSERT_SIZE=$OPTARG;;
		s) SHORT="YES";;
		\?) usage
			echo "error: unrecognized option -$OPTARG";
			exit 1
			;;
	esac
done

if [ $# -lt 12 ] ; then
   usage
   echo "error: too few arguments"
   exit 1
fi

# check if varaibles exist
[ -z ${THREADS+x} ] && { echo "error: missing variable -t argument"; exit 1; }
[ -z ${MAX_MEM+x} ] && { echo "error: missing variable -m argument"; exit 1; }
[ -z ${FASTQ1+x} ] && { usage; echo "error: missing -f argument."; exit 1; }
[ -z ${FASTQ2+x} ] && { usage; echo "error: missing -r argument."; exit 1; }
[ -z ${MARK_DUPLICATE+x} ] && { usage; echo "error: missing -p argument."; exit 1; }
[ -z ${PREFIX+x} ] && { usage; echo "error: missing -n argument."; exit 1; }
[ -z ${GENOME+x} ] && { usage; echo "error: missing -g argument."; exit 1; }
[ -z ${CUT_ENZ+x} ] && { usage; echo "error: missing -c argument."; exit 1; }
[ -z ${MIN_INSERT_SIZE+x} ] && { usage; echo "error: missing -d argument."; exit 1; }

# check if files exist
[ ! -f $FASTQ1 ] && { usage; echo "error: -f '$FASTQ1' not exists."; exit 1; }
[ ! -f $FASTQ2 ] && { usage; echo "error: -r '$FASTQ2' not exists."; exit 1; }
[ ! -f $MARK_DUPLICATE ] && { usage; echo "error: -p '$MARK_DUPLICATE' not exists."; exit 1; }
[ ! -f $GENOME ] && { usage; echo "error: -g '$GENOME' not exists."; exit 1; }
[ ! -f $CUT_ENZ ] && { usage; echo "error: -c '$CUT_ENZ' not exists."; exit 1; }

# check format of input
re='^[0-9]+$'
if ! [[ $THREADS =~ $re ]] ; then
   echo "error: '$THREADS' Not a number" >&2; 
   exit 1
fi

[ "$THREADS" -lt 2 ] && { usage; echo "error: -t THREADS must be no less than 2."; exit 1; }

echo $0 $* 2>&1 | tee $PREFIX.log 
echo 2>&1 | tee -a $PREFIX.log
echo THREADS=$THREADS 2>&1 | tee -a $PREFIX.log
echo FASTQ1=$FASTQ1 2>&1 | tee -a $PREFIX.log
echo FASTQ2=$FASTQ2 2>&1 | tee -a $PREFIX.log
echo MARK_DUPLICATE=$MARK_DUPLICATE 2>&1 | tee -a $PREFIX.log
echo GENOME=$GENOME 2>&1 | tee -a $PREFIX.log
echo CUTTER_SITES=$CUT_ENZ 2>&1 | tee -a $PREFIX.log
echo PREFIX=$PREFIX 2>&1 | tee -a $PREFIX.log
echo MIN_INSERT_SIZE=$MIN_INSERT_SIZE 2>&1 | tee -a $PREFIX.log

echo 2>&1 | tee -a $PREFIX.log


if [ -d $PREFIX\_tmp ]; then
	rm -r $PREFIX\_tmp
fi
mkdir $PREFIX\_tmp


echo "$(date) Step1. mapping and pairing and filtering and sorting reads ..." 
if [ ${FASTQ1: -4} == ".bz2" ];
then
	hicmap_pair_up_filter -f <(bwa mem -t $((THREADS / 2)) $GENOME <(bzcat -dc $FASTQ1) 2> $PREFIX\_tmp/$PREFIX.R1.bwa.log | chimeric.pl -) -r <(bwa mem -t $((THREADS / 2)) $GENOME <(bzcat -dc $FASTQ2) 2> $PREFIX\_tmp/$PREFIX.R2.bwa.log | chimeric.pl -) 2>>$PREFIX.log \
		| samtools view -h -L $CUT_ENZ - | hicmap_cutter_sites_filter $MIN_INSERT_SIZE - 2>> $PREFIX.log | samtools view -bS - | samtools sort -m $MAX_MEM - $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted
else
	hicmap_pair_up_filter -f <(bwa mem -t $((THREADS / 2)) $GENOME $FASTQ1 2> $PREFIX\_tmp/$PREFIX.R1.bwa.log | chimeric.pl -) -r <(bwa mem -t $((THREADS / 2)) $GENOME $FASTQ1 2> $PREFIX\_tmp/$PREFIX.R2.bwa.log | chimeric.pl -) 2>>$PREFIX.log \
		| samtools view -h -L $CUT_ENZ - | hicmap_cutter_sites_filter $MIN_INSERT_SIZE - 2>>$PREFIX.log | samtools sort -m $MAX_MEM - $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted
fi
[ ! -f $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.bam ] || [ ! -s $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.bam ] && { echo -e "Step2 failed. Aborting."; exit 1;}


echo -e "$(date) Step2. remove PCR duplications ..." 
java -Xmx$MAX_MEM -jar $MARK_DUPLICATE INPUT=$PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.bam  OUTPUT=$PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.nodup.bam  ASSUME_SORTED=true REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT METRICS_FILE=$PREFIX\_tmp/metrics.$PREFIX.txt  TMP_DIR=$PREFIX\_tmp
[ ! -f $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.nodup.bam ] || [ ! -s $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.nodup.bam ] && { echo -e "Step3 failed. Aborting."; exit 1;}
rm $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.bam

echo "$(date) Step3. select long-range cis nodup pairs ..." 
samtools view -h $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.nodup.bam \
	| awk -v var="$MIN_INSERT_SIZE" 'function abs(v) {return v < 0 ? -v : v} { if(substr($1, 1, 1)=="@" || abs($9) >= var) print }' \
		| samtools view -bS - > $PREFIX.bam &
ip_long=$!

if [ ! -z ${SHORT+x} ] 
then 
	samtools view -h $PREFIX\_tmp/$PREFIX.uniq.paired.cis.filtered.sorted.nodup.bam \
		| awk -v var="$MIN_INSERT_SIZE" 'function abs(v) {return v < 0 ? -v : v} { if(substr($1, 1, 1)=="@" || abs($9) < var) print }' \
			| samtools view -bS - > $PREFIX.short.bam &
	ip_short=$!
fi

while kill -0 $ip_long 2>/dev/null
do
  sleep 1
done

if [ ! -z ${SHORT+x} ] 
then 
	while kill -0 $ip_short 2>/dev/null
	do
	  sleep 1
	done
fi


[ ! -f $PREFIX.bam  ] || [ ! -s $PREFIX.bam  ] && { echo -e "Step4 failed. Aborting."; exit 1;}

echo -e "$(date) Step4. indexing $PREFIX.long.bam and $PREFIX.short.bam ..." 
samtools index $PREFIX.bam

if [ ! -z ${SHORT+x} ] 
then 
	[ ! -f $PREFIX.short.bam  ] || [ ! -s $PREFIX.short.bam  ] && { echo -e "Step4 failed. Aborting."; exit 1;}
	samtools index $PREFIX.short.bam
fi


echo -e "$(date) Step5. summerizing and cleaning up ..." 
UNIQ_PAIRED_CIS_FILTERED_SORTED_LONG_NODUP=$(samtools view $PREFIX.bam | wc -l | awk '{print $1}')
echo "number of unique long-range cis pairs after filtered by cutter cites $((UNIQ_PAIRED_CIS_FILTERED_SORTED_LONG_NODUP/2))" 2>&1 | tee -a $PREFIX.log

# clean up
rm -r $PREFIX\_tmp/
