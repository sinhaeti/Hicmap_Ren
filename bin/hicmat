#!/usr/bin/env python

import sys
import optparse
import os.path
import collections
import pysam
import operator

def main():
    
    parser = optparse.OptionParser(description='Generate HiC interaction maps.', 
                                   usage='%prog [-h] [-i INPUT] [-s BSIZE] [-o OUTPUT]')

    parser.add_option('-i',
                      dest="INPUT",
                      help='input .bam file that contains the paired HiC reads (generated by hicmap).'
                      )
   
    parser.add_option('-s',
                      dest="BSIZE", 
                      type=int,
                      help='interaction bin size.'
                      )

    parser.add_option('-o',
                      dest="OUTPUT", 
                      help='prefix of output files.'
                      )
                      
    options, remainder = parser.parse_args()
    
    bin_size = 40000    
    if options.BSIZE: bin_size = options.BSIZE
    
    infile = options.INPUT    
    if not infile:
        parser.print_help()
        exit('error: too few arguments')

    if not os.path.isfile(infile): exit("error: \'%s\' not exist" % infile);

    if not options.OUTPUT:
        parser.print_help()
        exit('error: too few arguments')


    outfile = options.OUTPUT    
    # generate the map
    max_bin = 0
    map_dict = {}
    for line in pysam.view("-S", infile):
        _chr = line.split()[2]
        [_pos1, _pos2] = sorted([int(line.split()[3]), int(line.split()[7])])
        key = (_chr, (_pos1/bin_size + 1) * bin_size, (_pos2/bin_size + 1) * bin_size)
        if key not in map_dict:
            map_dict[key] = 1
        else: 
            map_dict[key] += 1
    
    fout_count = open(outfile+'.count', "w")
    fout_xgi   = open(outfile+'.xgi', "w")
    
    bins = []
    for key in map_dict:
        _bin1 = "".join([key[0], ":", str(key[1] + 1), "-", str(key[1] + bin_size - 1)]) 
        _bin2 = "".join([key[0], ":", str(key[2] + 1), "-", str(key[2] + bin_size - 1)]) 
        bins.append((key[0], key[1] + 1, key[1] + bin_size - 1))
        bins.append((key[0], key[2] + 1, key[2] + bin_size - 1))
        fout_count.write("\t".join([_bin1, _bin2, str(map_dict[key]), "\n"]))
        print _bin1
    fout_count.close()
    
    
    for _bin in sorted(set(bins), key=operator.itemgetter(1, 2)):
        _bin_1 = '\t'.join([_bin[0], str(_bin[1]), str(_bin[1])]) 
        _bin_2 = _bin[0] + ':' + str(_bin[1]) + '-' + str(_bin[1]) 
        fout_xgi.write('\t'.join([_bin_1, _bin_2, "\n"]))
    
if __name__ == '__main__':
    main()